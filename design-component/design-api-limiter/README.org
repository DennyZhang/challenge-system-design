* [#A] Design: An API Rate Limiter                              :Feature:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designcomponent
:END:
---------------------------------------------------------------------
Design an API Rate Limiter
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/design-feature/design-api-limiter"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

Similar Posts:
- Tag: [[https://architect.dennyzhang.com/tag/designcomponenty][#designcomponent]]
---------------------------------------------------------------------
If you are deploying an API, it is generally a best practice to have a relatively small rate limit for anonymous access and then force users to log in to obtain a higher rate limit.

*Clarifications*
| Name                                  | Summary |
|---------------------------------------+---------|
| A free tier or a premium tier         |         |
| Limit per count or per user           |         |
| Limit in client side or server side   |         |
| Scale: whether it can fit in one node |         |

*Key Parts*
| Name                                           | Example                                                 |
|------------------------------------------------+---------------------------------------------------------|
| 3 Directions Of Implementing API rate-limiting | Request Queues; Throttling; Rate-limiting Algorithms    |
| Rate-limiting Algorithms                       | Leaky Bucket; Fixed Window; Sliding Log; Sliding Window |
| Reference                                      | [[https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm/][Link: How to Design a Scalable Rate Limiting Algorithm]]  |
| Reference                                      | [[https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/][Better Rate Limiting With Redis Sorted Sets]]             |
| Reference                                      | [[https://hechao.li/2018/06/25/Rate-Limiter-Part1/][Link: Rate Limiting Part 1]], [[https://hechao.li/2018/06/27/Rate-Limiter-Part2/][Link: Rate Limiting Part 2]]  |
| Reference                                      | [[https://cloud.google.com/solutions/rate-limiting-strategies-techniques][Link: Rate-limiting strategies and techniques]]           |
| Reference                                      | [[https://github.com/hechaoli/simple-rate-limiters/tree/master/src][Github: simple-rate-limiters]] [[https://en.wikipedia.org/wiki/Rate_limiting][wikipedia: Rate limiting]]   |

Q: Algorithm of rate limit?

A: 
- [[https://en.wikipedia.org/wiki/Token_bucket][token bucket/leaky bucket]]. Data structure: (counter). The integer counter will be constantly refilled/decreased.
- fixed window. Data structure: (counter, the floor of current window).
- sliding log. Data structure: (sorted hashset)
- sliding window. Data structure: (counter, the floor of current window, weight)

| Rate limit Algorithm | Pros                         | Cons                           |
|----------------------+------------------------------+--------------------------------|
| leaky bucket         | Space optimal                | Starving for new requests      |
| fixed window         | No starving for new requests | Boundary conditions issue      |
| sliding log          | Accurate                     | High time and space complexity |
| sliding window       |                              |                                |

Q: Follow-up: how to avoid conflict?

A: 

Q: Follow-up: Let's say we have supported rate limit for an endpoint. For rate limiting of the same endpoint, how we can support SLA for different types of servers?

A:

Q: Follow-up: Requests are 20K per seconds, how to implement the rate limiting feature?

A: One server won't be powerful enough to handle the request. 

With multiple servers involved, we need an external key-value store to sync state. Redis can be a good candidate in term of scale and performance.

Alternatively routing same request to the same server, say enable sticky-session in load balancer. However this would result in a lack of fault tolerance and scale problems.

Clarification: Could we sacrifice some accuracy to simplify the solution for big volume of requests? TODO

Q: How to make the apit rate limit high available?

A: TODO

** misc                                                            :noexport:
# Question:
```
Develop an API Rate-limit Throttling Client
```
- Difficulty: Easy
- Tags:
- Original Link: http://massivetechinterview.blogspot.com/2015/10/develop-api-rate-limit-throttling-client.html
- Highlights:

https://help.shopify.com/api/getting-started/api-call-limit

"leaky bucket" algorithm 
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=503307&extra=page%3D1%26filter%3Ddigest%26digest%3D1%26digest%3D1 :noexport:
