* [#A] Design: A Distributed Counter                            :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
Design: A Distributed Counter
---------------------------------------------------------------------
Similar Posts:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]], [[https://architect.dennyzhang.com/tag/designservice][#designservice]], [[https://architect.dennyzhang.com/tag/datastructure][#datastructure]]
---------------------------------------------------------------------
#+BEGIN_HTML
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/design-feature/design-distributed-counter"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

| Name                                                             | Summary |
|------------------------------------------------------------------+---------|
| Use case: Can we allow inaccurate updates?                       |         |
| Use case: Would it be big issues, if we lost of counter updates? |         |
| Use case: how to support distributed counters?                   | [[https://firebase.google.com/docs/firestore/solutions/counters][link]]    |
| Use case: How to support get average of the counter?             | [[http://blog.gainlo.co/index.php/2016/09/12/dropbox-interview-design-hit-counter/][link]]    |
| Constraints: TPS of writes and reads?                            |         |
| Concurrency: How about concurrent requests?                      |         |

Q: Why we need distributed counters?

Counter represents a single integer value waving up so fast you can tolerate incorrect values.

Common examples:
#+BEGIN_EXAMPLE
- Number of likes on Facebook
- Number of retweets on Twitter
- Number of shares traded on an exchange
- Clicks, views, etc
#+END_EXAMPLE
---------------------------------------------------------------------
Q: What about using RDMBS to support counters?

#+BEGIN_EXAMPLE
Prior to counters, solutions for counting looked like this:
- one column per increment, with a batch background job
- external synchronization (Zookeeper, through Cages)
- use another database (Redis, PostgreSQL, . . . )
#+END_EXAMPLE

Yes, with one update SQL statement, it's done.

But this design will have severe performance issues, if the data volume is big. You physically can't issue new updates if the last one hasn't finished.

In [[https://firebase.google.com/docs/firestore/solutions/counters][Cloud Firestore]], document update is about once per second

Besides the design can't scale easily.
---------------------------------------------------------------------
Q: How to support large scale of writes operations to the counter?

A: counter will only be increasing. And the value are usually intergers.

1. Use a lock
- Partition: Split one counter into multiple sub-counters. Each writer choose one to update. Then sum them up. Thus less frequent locking might happen. ([[https://firebase.google.com/docs/firestore/solutions/counters][link]])
- Serialize writes with async updates: Put all updates requests into a queue. Then use a single write strategy to update it.
- Use CRDTs (Consistent Replicated Data Types) and [[https://architect.dennyzhang.com/explain-vector-clocks/][vector lock]] to merge the updates. [[https://www.paperplanes.de/2012/6/27/playing-with-riak-and-crdts.html][link]] (TODO)
---------------------------------------------------------------------
Q: How to support large scale of reads operators to the counter?

TODO
---------------------------------------------------------------------
Q: What if counter out of boundary?

TODO
---------------------------------------------------------------------
Q: How to support get average of the counter?

TODO
---------------------------------------------------------------------
Q: Are there any existings tools we can use to support distributed counter?

A: Use Redis INCR command. The counter pattern is the most obvious thing you can do with Redis atomic increment operations.

[[url-external:https://redis.io/commands/incr][Redis INCR key]]
---------------------------------------------------------------------
Related Readings:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- [[url-external:http://www.datastax.com/wp-content/uploads/2011/07/cassandra_sf_counters.pdf][Distributed Counters in Cassandra]]
- [[https://github.com/belaban/JGroups/blob/master/doc/design/CounterService.txt][JGroups CounterService]]
- [[url-external:http://rockthecode.io/blog/highly-available-counters-using-cassandra/][Highly Available Counters Using Cassandra]]
