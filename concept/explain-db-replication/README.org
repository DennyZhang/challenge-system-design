* Design: DB Replication                                        :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
One of the most important elements of distributed database architecture is replication.

[[color:#c7254e][It determines whether or not the data is consistent / available.]]
---------------------------------------------------------------------
Similar Posts:
- [[https://architect.dennyzhang.com/design-key-facts][Key Facts In Cloud Systems]]
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]]
---------------------------------------------------------------------
#+BEGIN_HTML
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/DennyZhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/concept/explain-db-replication"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

| Name           | Summary                                                            |
|----------------+--------------------------------------------------------------------|
| DB replication | Transactional replication/Merging replication/Snapshot replication |
| DB deployment  | Master-Slave/Multiple-Master/Masterless                            |

Q: What are typical replication mechanisms for RDBMS?

| Name                        | Summary                                                                             |
|-----------------------------+-------------------------------------------------------------------------------------|
| *Transactional* replication | Users receive full initial copies of the database and then receive periodic updates |
| *Snapshot* replication      | simply takes a "snapshot" of the data on one server and moves it to another server  |
| *Merging* replication       | Data from two or more databases is combined into a single database                  |

- *Transactional* replication: Users receive full initial copies of the database and then receive periodic updates as data changes.

_Database mirroring_ or _Mysql Binlog Replication_ are typical transactional replications.

- *Merging* replication: Data from two or more databases is combined into a single database.

Merge replication is primarily designed for mobile applications or distributed server applications that have possible data conflicts. 

Common scenarios include: exchanging data with mobile users; consumer point of sale (POS) applications; and integration of data from multiple sites.

- *Snapshot* replication: simply takes a "snapshot" of the data on one server and moves that data to another server (or another database on the same server).

Snapshot replication is used to provide the initial data set for transactional and merge replication; it can also be used when complete refreshes of data are appropriate. e.g elasticsearch snapshot feature.

SQL Server 2000 supports three distinct types of replication: snapshot, transactional, and merge, each of which has its own purpose.

---------------------------------------------------------------------
Q: What are typical deployment models of replication mechanisms?
| Name            | Summary                      |
|-----------------+------------------------------|
| Master/Slave    |                              |
| Multiple-Master |                              |
| Masterless      | Every node is a primary node |

Process of Master/Slave Replication Model:
1. Writes are executed on master node(s), then replicate to slave nodes.
2. If we allow dirty reads, reads can happen in slave nodes. Otherwise read can only happen in master nodes as well.

Many large scale websites use mysql. They always have lots of reads with few writes. Thus people usually use master/slave model of mysql.

In Master/Slave Replication, master nodes are SPOF(single point of failure).

[[image-blog:DB replication][https://raw.githubusercontent.com/dennyzhang/architect.dennyzhang.com/master/concept/explain-db-replication/DBReplication.jpg]]

Process of MasterLess Replication Model:
1. Writes are executed in multiple nodes, which can also be called copies.
2. If we allow dirty reads, reads can happen in one of the nodes. Otherwise we need to read all replicas.

Couchbase and elasticsearch are using masterless replication model.

Usually they are *Quorum Based Voting*.
---------------------------------------------------------------------
Q: What are typical methods for mysql master HA? What the main logic looks like?

[[color:#c7254e][TODO]]:
---------------------------------------------------------------------
Q: Explain the process of Multiple-Master Replication Model.

[[color:#c7254e][TODO]]
---------------------------------------------------------------------
Q: Explain the process of db fail-over.

[[color:#c7254e][TODO]]

---------------------------------------------------------------------
More Reading:
1. [[url-external:http://searchsqlserver.techtarget.com/definition/database-replication][database replication]]
- [[url-external:http://www.informit.com/articles/article.aspx?p=169612&seqNum=2][Introduction to Database Replication]]
- [[url-external:https://blog.couchbase.com/distributed-databases-and-replication-design/][Distributed Databases and Replication Design]]
- [[url-external:https://en.wikipedia.org/wiki/Replication_(computing)][Replication (computing) by wikipedia]]
- [[url-external:https://docs.microsoft.com/en-us/sql/relational-databases/replication/sql-server-replication][SQL Server Replication]]
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

* Misc                                                             :noexport:
Cross-site region replication

Auto failover
sync/async replication, binlog
multi-leader, quorum consistency
