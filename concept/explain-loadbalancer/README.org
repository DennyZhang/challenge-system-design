* Design: How Does LoadBalancer Work?                           :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
Design: How Does LoadBalancer Work?
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/concept/explain-loadbalancer"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

Similar Posts:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]]
---------------------------------------------------------------------
- Typical Features/Considerations
| Name                                  | Summary                                                                 |
|---------------------------------------+-------------------------------------------------------------------------|
| Route traffic                         | [[https://serverfault.com/questions/112292/what-kind-of-load-balancing-algorithms-are-there][LoadBalancer Algorithms]]                                                 |
| L3/L4 LoadBalancer vs L7 LoadBalancer | [[https://avinetworks.com/what-is-load-balancing/][link]]                                                                    |
| Redundant Load Balancers              | Load balancer active/passive                                            |
| Health checks                         | Load balancers should only forward traffic to "healthy" backend servers |
| Sticky session                        |                                                                         |
| SSL termination                       |                                                                         |
| Service throttling                    |                                                                         |
| Predictive analytics                  | Smart load balancers can help to determine traffic bottlenecks          |

Q: How LoadBalancer route requests?

Typical algorithms:
| Name                 | Summary                                                       |
|----------------------+---------------------------------------------------------------|
| Round robin          |                                                               |
| Weighted round robin | Servers with higher weights get more connections              |
| Least Connection     |                                                               |
| Least Response Time  |                                                               |
| Least Bandwidth      |                                                               |
| IP Hash with mod     | Caculate IP hashing, then decide a server                     |
| choice-of-2          | Absolute best choice using incomplete data may not be optimal |

- choice-of-2:  Instead of making the absolute best choice using incomplete data, with "power of two choices" you pick two queues at random and chose the better option of the two, avoiding the worse choice.

[[https://www.nginx.com/blog/nginx-power-of-two-choices-load-balancing-algorithm/][Link: NGINX and the "Power of Two Choices" Load-Balancing Algorithm]]

Commonly used algorithms for HAProxy([[https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts#load-balancing-algorithms][link]]):

- *roundrobin*: Round Robin selects servers in turns. This is the default algorithm.
- *leastconn*: Selects the server with the least number of connections--it is recommended for longer sessions. Servers in the same backend are also rotated in a round-robin fashion.
- *source*: This selects which server to use based on a hash of the source IP i.e. your user's IP address. This is one method to ensure that a user will connect to the same server.

Q: What are the pros/cons of different algorithms? And typical use cases of each?

A: TODO

Q: L3/L4 LoadBalancer vs L7 LoadBalancer

- L3/L4 Load Balancer: traffic is routed by IP address and port. L3 is network layer (IP). L4 is session layer (TCP).
- L7 Load Balancer: traffic is routed by what is inside the HTTP protocol. L7 is application layer (HTTP).

Q: What are sticky sessions?

Some applications require that a user continues to connect to the same backend server. This persistence is achieved through sticky sessions, using the appsession parameter in the backend that requires it.

Q: How the Readiness Probe is done for backend services?

Often, session tracking is accomplished via a consistent hashing function. 

Q: How loadbalancer enable/enable one specific backend server, per health check?

A: TODO

Q: Elastic IP vs loadbalancer?

A: TODO

Q: For the failure of loadbalancer, would people add more than one redundant load balancer?

A: TODO

Q: Consistent hashing in load balancing?

A:

Configuration example in HAProxy using consistent hashing: [[https://www.haproxy.com/blog/client-ip-persistence-or-source-ip-hash-load-balancing/][link]]
#+BEGIN_EXAMPLE
balance source
hash-type consistent
#+END_EXAMPLE

* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* https://avinetworks.com/what-is-load-balancing/                  :noexport:
* useful link                                                      :noexport:
https://lethain.com/introduction-to-architecting-systems-for-scale/
https://en.wikipedia.org/wiki/Load_balancing_(computing)
