* Explain: Gossip Protocol                                          :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
How Gossip protocol works?
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/concept/explain-gossip"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Posts:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]]
---------------------------------------------------------------------
| Name      | Summary                                                           |
|-----------+-------------------------------------------------------------------|
| Reference | [[url-external:https://www.youtube.com/watch?v=oZtfw8rMJ7g][YouTube: The Gossip Protocol]],  [[url-external:https://www.youtube.com/watch?v=Gxf5glthqrk&pbjreload=10][YouTube: Randomized Gossip Methods]] |

Q: What problems gossip protocol try to solve?
- Reliable communication is not assumed.
- The frequency of the interactions is low compared to typical message latencies so that the protocol costs are negligible.
TODO

Q: What the basic idea of gossip protocol is?

Every t seconds, on each node
1. The node selects some other node to chat with.
- The node reconciles its view of the cluster with its gossip buddy.
- Each node maintains a "timestamp" for itself and the most recent information it has from every other node.
#+BEGIN_EXAMPLE
The concept of gossip communication can be illustrated by the analogy
of office workers spreading rumors. Let's say each hour the office
workers congregate around the water cooler. Each employee pairs off
with another, chosen at random, and shares the latest gossip.

At the start of the day, Alice starts a new rumor: she comments to Bob
that she believes that Charlie dyes his mustache. At the next meeting,
Bob tells Dave, while Alice repeats the idea to Eve. After each water
cooler rendezvous, the number of individuals who have heard the rumor
roughly doubles (though this doesn't account for gossiping twice to
the same person; perhaps Alice tries to tell the story to Frank, only
to find that Frank already heard it from Dave). Computer systems
typically implement this type of protocol with a form of random "peer
selection": with a given frequency, each machine picks another machine
at random and shares any hot rumors.

The power of gossip lies in the robust spread of information. Even if
Dave had trouble understanding Bob, he will probably run into someone
else soon and can learn the news that way.  
#+END_EXAMPLE
Read more: [[url-external:https://en.wikipedia.org/wiki/Gossip_protocol][wikipedia]].

Q: What key parts of gossip protocol are?
- peer selection: Each node pairs off with another, chosen at random
TODO

Q: Since we choose peers randomly, how we know the rummor has been propagated to all nodes?

No, you don't

TODO

Q: Give me some real examples which gossip protocol can be useful

- Config information changes

#+BEGIN_EXAMPLE
For example, in a network with 25,000 machines, we can find the best
match after about 30 rounds of gossip: 15 to spread the search string
and 15 more to discover the best match. A gossip exchange could occur
as often as once every tenth of a second without imposing undue load,
hence this form of network search could search a big data center in
about 3 seconds.
#+END_EXAMPLE

- Node leave or join the cluster

Consul uses a gossip protocol to manage membership and broadcast messages to the cluster. See more: [[url-external:https://www.consul.io/docs/internals/gossip.html][Consul Gossip]]

* misc                                                             :noexport:
https://www.coursera.org/learn/cloud-computing/lecture/5AOex/1-2-the-gossip-protocol
https://en.wikipedia.org/wiki/Gossip_protocol
http://www.inf.u-szeged.hu/~jelasity/ddm/gossip.pdf
https://www.consul.io/docs/internals/gossip.html
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO http://highscalability.com/blog/2011/11/14/using-gossip-protocols-for-failure-detection-monitoring-mess.html :noexport:
