* [#A] Concurrency & Communication                              :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
Multi-threaded applications may need to coordinate threads that share data or other resources. Different processes may need to coordinate with each other as well.

The sequence matters, in order to guarantee the results' *correctness*. And meanwhile we definitely want to improve the *performance*.

So what are the common approaches for this? And what are the pros and cons?
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/concept/explain-coordination"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

Similar Posts:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]]
---------------------------------------------------------------------

| Name                                | Summary |
|-------------------------------------+---------|
| Dead Lock                           |         |
| Atomic Operations                   |         |
| Lock & Metasphore                   |         |
| Lock-free                           |         |
| Async Programming                   |         |
| Race Conditions                     |         |
| Implement Thread-safe queue/hashmap |         |

---------------------------------------------------------------------
Q: Concurrency between multiple threads?

A: TODO

Cooperation:

| Name          | Summary |
|---------------+---------|
| Pipe          |         |
| Semophore     |         |
| Message queue |         |
| Signal        |         |
| Shared Memory |         |
| Socket        |         |

Synchronize
| Name             | Summary |
|------------------+---------|
| Critical section |         |
| Mutex            |         |
| Signal           |         |
| Events           |         |
---------------------------------------------------------------------
Q: Multiprocessing vs Multithreading?

A: TODO
---------------------------------------------------------------------
Q: Thread vs goroutine?

A: TODO
---------------------------------------------------------------------
Q: How to detect dead lock and prevent it?

A: TODO
---------------------------------------------------------------------
Q: Synchronous vs. Asynchronous

With async architectures, we can scale out for better performance.

But with sync architectures, *the performance may not improve, even if we are willing to add more infrastures*.

e.g, performance bottlenecks are at applications, instead of Databases. And the application has lots of locks and even starvations.
---------------------------------------------------------------------
Q: Synchronized in Java. How it's implemented?

Multi-threaded programs may often come to a situation where multiple threads try to access the same resources and finally produce erroneous and unforeseen results.

#+BEGIN_EXAMPLE
// Only one thread can execute at a time. 
// sync_object is a reference to an object
// whose lock associates with the monitor. 
// The code is said to be synchronized on
// the monitor object
synchronized(sync_object)
{
   // Access shared variables and other
   // shared resources
}
#+END_EXAMPLE

[[https://www.geeksforgeeks.org/synchronized-in-java/][link]]
---------------------------------------------------------------------

* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO notes                                                       :noexport:
http://wiki.gyh.me/Interview/OS/

