* Explain Bloom Filter                                              :Concept:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
#+EXPORT_EXCLUDE_TAGS: exclude noexport BLOG
:PROPERTIES:
:type: systemdesign, designconcept
:END:
---------------------------------------------------------------------
A Bloom filter is a space-efficient probabilistic data structure
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/architect.dennyzhang.com/tree/master/concept/explain-bloomfilter"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

Similar Posts:
- [[https://architect.dennyzhang.com/design-concept][Concepts For System Design]]
- Tag: [[https://architect.dennyzhang.com/tag/systemdesign][#systemdesign]]
---------------------------------------------------------------------
| Name                                                      | Summary                |
|-----------------------------------------------------------+------------------------|
| Bloom filter is based on multiple hashing, instead of one |                        |
| Bloom filters are usually periodically rebuilt            |                        |
| By default, you can't remove element from bloom filter    |                        |
| Reference                                                 | [[https://www.youtube.com/watch?v=heEDL9usFgs][YouTube: Bloom Filters]] |
---------------------------------------------------------------------
Q: What are the typical use cases of bloom filter?

- Cache filtering: Google Bigtable, Apache HBase and Apache Cassandra and PostgreSQL[11] use Bloom filters to reduce the disk lookups for non-existent rows or columns.
- Search engine: Microsoft Bing (search engine) uses multi-level hierarchical Bloom filters for its search index.
- Web browser: The Google Chrome web browser used to use a Bloom filter to identify malicious URLs.
- Data synchronization: Bloom filters can be used for approximate data synchronization.
- Bitcoin uses Bloom filters to speed up wallet synchronization
---------------------------------------------------------------------
Q: How we know bloom filter needs to be rebuilt?

A: TODO
---------------------------------------------------------------------
Q: How to resize bloom filter, if false positive ratio is too high?

A: TODO
---------------------------------------------------------------------
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
